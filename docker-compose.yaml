networks:
  whaticket:
    driver: bridge

volumes:
  whaticketdb_data:
  whaticketredis_data:
  sessions_data:

services:
  # === Banco de dados (MariaDB) ===
  db:
    image: mariadb:latest
    container_name: whaticketdb
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_bin
    environment:
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD:-strongpassword}
      - MARIADB_DATABASE=${MARIADB_DATABASE:-whaticket}
      - MARIADB_USER=${MARIADB_USER:-whaticket}
      - MARIADB_PASSWORD=${MARIADB_PASSWORD:-whaticket}
      - TZ=${TZ:-America/Fortaleza}
    ports:
      - "3306:3306"
    volumes:
      - whaticketdb_data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mariadb-admin ping -h 127.0.0.1 -uroot -p$${MARIADB_ROOT_PASSWORD} --silent || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - whaticket

  # === Redis ===
  redis:
    image: redis:latest
    container_name: whaticketredis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - whaticketredis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - whaticket

  # === Backend ===
  backend:
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    container_name: botcomander-backend
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${BACKEND_PORT:-8080}:3000"
    volumes:
      - ./backend/public/:/usr/src/app/public/
      # persiste sessões do WhatsApp
      - sessions_data:/usr/src/app/.wwebjs_auth/
    environment:
      - NODE_ENV=${NODE_ENV:-PRODUCTION}
      # DB (aponta para o serviço 'db' deste compose)
      - DB_HOST=db
      - DB_PORT=${DB_PORT:-3306}
      - DB_DIALECT=${DB_DIALECT:-mysql}
      - DB_USER=${MARIADB_USER:-whaticket}
      - DB_PASS=${MARIADB_PASSWORD:-whaticket}
      - DB_NAME=${MARIADB_DATABASE:-whaticket}
      # Redis (aponta para o serviço 'redis' deste compose)
      - REDIS_URI=redis://redis:6379
      - REDIS_OPT_LIMITER_MAX=${REDIS_OPT_LIMITER_MAX:-1}
      - REDIS_OPT_LIMITER_DURATION=${REDIS_OPT_LIMITER_DURATION:-3000}
      # JWT / URLs
      - JWT_SECRET=${JWT_SECRET:-3123123213123}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-75756756756}
      - BACKEND_URL=${BACKEND_URL:-http://localhost}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - PROXY_PORT=${PROXY_PORT:-8080}
      # Puppeteer flags
      - CHROME_ARGS=--no-sandbox --disable-setuid-sandbox
    networks:
      - whaticket

  # === Frontend (Nginx) ===
  frontend:
    build:
      context: ./frontend
    container_name: botcomander-frontend
    restart: always
    depends_on:
      - backend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
      - "${FRONTEND_SSL_PORT:-3001}:443"
    volumes:
      - ./ssl/certs/:/etc/nginx/ssl/
      - ./ssl/www/:/var/www/letsencrypt/
    environment:
      # backend acessível na rede interna do compose
      - URL_BACKEND=backend:3000
      # para o browser (externo) falar com o proxy do backend publicado
      - REACT_APP_BACKEND_URL=${BACKEND_URL:-http://localhost}:${PROXY_PORT:-8080}/
      - FRONTEND_SERVER_NAME=${FRONTEND_SERVER_NAME}
      - BACKEND_SERVER_NAME=${BACKEND_SERVER_NAME}
    networks:
      - whaticket
